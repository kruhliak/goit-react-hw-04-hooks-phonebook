{"version":3,"sources":["components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styles.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["Form","styled","form","ContactForm","onSubmit","useState","name","setName","number","setsNumber","handleChangeForm","e","currentTarget","value","console","log","resetForm","preventDefault","type","onChange","pattern","title","required","autoComplete","List","ul","ContactList","contactsData","onDeleteContact","map","contact","onClick","id","Thumb","div","Filter","filter","App","contacts","setContacts","setFilter","useEffect","storageContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","randomId","nanoid","find","includes","alert","normalizedFilter","toLowerCase","item","getVisibleContacts","contactId","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e322b3a.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: grid;\n  grid-template-columns: min-content;\n\n  & button {\n    margin: 10px 0;\n    background-color: #e6ffe0d5;\n    border: 1px solid #000;\n    border-radius: 4px;\n    &:hover,\n    :focus {\n      background-color: #bffab0d3;\n      transform: scale(1.1);\n    }\n  }\n`;\n","import { useState } from 'react';\nimport { Form } from './ContactForm.styles';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setsNumber] = useState('');\n\n  const handleChangeForm = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'number':\n        return setsNumber(value);\n\n      default:\n        console.log('default');\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setsNumber('');\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmitForm}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChangeForm}\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            autoComplete=\"off\"\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChangeForm}\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            autoComplete=\"off\"\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </div>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 5px;\n  margin: 10px 0;\n\n  & li {\n    margin: 5px 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    & button {\n      margin-left: 10px;\n      background-color: #f0c8c8;\n      border: 1px solid #000;\n      border-radius: 4px;\n      &:hover,\n    :focus {\n      background-color: #f09797;\n      transform: scale(1.05);\n    }\n    }\n  }\n`;\n","import { List } from './ContactList.styles';\n\nfunction ContactList({ contactsData, onDeleteContact }) {\n  return (\n    <List>\n      {contactsData.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\n            Удалить\n          </button>\n        </li>\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Thumb = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  & p {\n    margin: 5px 0;\n  }\n`;\n","import {Thumb} from './Filter.styles'\n\nfunction Filter({ onChange, filter }) {\n  return (\n    <Thumb>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        autoComplete=\"off\"\n      />\n    </Thumb>\n  );\n}\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const storageContacts = localStorage.getItem('contacts');\n    console.log(storageContacts);\n    const parsedContacts = JSON.parse(storageContacts);\n    console.log(parsedContacts);\n    if (!parsedContacts) {\n      return;\n    }\n    setContacts(parsedContacts);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleChangeFilter = e => {\n    const { value } = e.currentTarget;\n    setFilter(value);\n  };\n\n  const handleSubmit = (name, number) => {\n    const randomId = nanoid();\n    const findContact = contacts.find(contact => contact.name.includes(name));\n\n    findContact\n      ? alert(`${name} is already in contacts`)\n      : setContacts([...contacts, { id: randomId, name, number }]);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  return (\n    <div id=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={handleChangeFilter} />\n      <ContactList\n        contactsData={getVisibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\n\n// export default class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n// componentDidUpdate(_, prevState) {\n//   if (prevState.contacts !== this.state.contacts) {\n//     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//   }\n// }\n\n// componentDidMount() {\n//   const contacts = localStorage.getItem('contacts');\n//   const parsedContacts = JSON.parse(contacts);\n\n//   if (parsedContacts) {\n//     this.setState({ contacts: parsedContacts });\n//   }\n// }\n\n// handleChange = e => {\n//   const { name, value } = e.currentTarget;\n//   this.setState({ [name]: value });\n// };\n\n//   handleSubmit = (name, number) => {\n//     const { contacts } = this.state;\n//     const randomId = nanoid();\n//     const findContact = contacts.find(contact => contact.name.includes(name));\n\n//     findContact\n//       ? alert(`${name} is already in contacts`)\n//       : this.setState({\n//           contacts: [...contacts, { id: randomId, name, number }],\n//         });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(item =>\n//       item.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n\n// return (\n//   <div id=\"container\">\n//     <h1>Phonebook</h1>\n//     <ContactForm onSubmit={this.handleSubmit} />\n//     <h2>Contacts</h2>\n//     <Filter filter={filter} onChange={this.handleChange} />\n//     <ContactList\n//       contactsData={visibleContacts}\n//       onDeleteContact={this.deleteContact}\n//     />\n//   </div>\n// );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}